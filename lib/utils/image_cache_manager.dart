import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter/painting.dart';
import 'package:flutter/foundation.dart';
import 'performance_utils.dart';

/// ðŸš€ PERFORMANCE MOD: Adaptif image cache ve memory yÃ¶netimi
class ImageCacheManager {
  static bool _isInitialized = false;
  
  // ðŸš€ PERFORMANCE MOD: GeliÅŸmiÅŸ Image Cache Manager
  static Map<String, Map<String, int>> cacheSettings = {
    'high_end': {
      'max_size_mb': 300,
      'max_count': 3000,
      'background_size_mb': 150,
      'background_count': 1500,
    },
    'mid_range': {
      'max_size_mb': 200,
      'max_count': 2000,
      'background_size_mb': 100,
      'background_count': 1000,
    },
    'low_end': {
      'max_size_mb': 100,
      'max_count': 1000,
      'background_size_mb': 50,
      'background_count': 500,
    },
  };
  
  static void initialize() {
    if (kIsWeb) return;
    
    if (_isInitialized) return;
    _isInitialized = true;
    
    // Cihaz kategorisine gÃ¶re ayarlarÄ± belirle
    final deviceCategory = PerformanceUtils.deviceCategory;
    final settings = cacheSettings[deviceCategory] ?? cacheSettings['mid_range']!;
    
    // Foreground cache ayarlarÄ±
    PaintingBinding.instance.imageCache.maximumSizeBytes = 
        settings['max_size_mb']! * 1024 * 1024;
    PaintingBinding.instance.imageCache.maximumSize = 
        settings['max_count']!;
    
    debugPrint('ðŸ“ˆ Image cache baÅŸlatÄ±ldÄ±: ${settings['max_size_mb']}MB, ${settings['max_count']} image (Kategori: $deviceCategory)');
  }
  
  // ðŸš€ PERFORMANCE MOD: Adaptif memory pressure handling
  static void handleMemoryPressure() {
    final isLowEnd = PerformanceUtils.isLowEndDevice;
    
    if (isLowEnd) {
      // DÃ¼ÅŸÃ¼k performanslÄ± cihazlarda agresif temizlik
      PaintingBinding.instance.imageCache.clear();
      PaintingBinding.instance.imageCache.clearLiveImages();
      
      // Cache boyutunu kÃ¼Ã§Ã¼lt
      PaintingBinding.instance.imageCache.maximumSizeBytes = 50 << 20; // 50 MB
      PaintingBinding.instance.imageCache.maximumSize = 500;
      
      debugPrint('ðŸ§¹ Agresif cache temizliÄŸi (dÃ¼ÅŸÃ¼k performans cihaz)');
    } else {
      // Normal cihazlarda kÄ±smi temizlik
      final currentSize = PaintingBinding.instance.imageCache.currentSizeBytes;
      final maxSize = PaintingBinding.instance.imageCache.maximumSizeBytes;
      
      if (currentSize > maxSize * 0.8) {
        // Cache'in %20'sini temizle
        PaintingBinding.instance.imageCache.clear();
        debugPrint('ðŸ§¹ KÄ±smi cache temizliÄŸi (memory pressure)');
      }
    }
    
    // Garbage collection tetikle
    SystemChannels.platform.invokeMethod('System.gc');
  }
  
  // ðŸš€ PERFORMANCE MOD: Background'a geÃ§erken cache boyutunu kÃ¼Ã§Ã¼lt
  static void optimizeForBackground() {
    if (kIsWeb) return;
    
    final deviceCategory = PerformanceUtils.deviceCategory;
    final settings = cacheSettings[deviceCategory] ?? cacheSettings['mid_range']!;
    
    final sizeBefore = PaintingBinding.instance.imageCache.currentSizeBytes;
    final countBefore = PaintingBinding.instance.imageCache.currentSize;
    
    // Background cache ayarlarÄ±
    PaintingBinding.instance.imageCache.maximumSizeBytes = 
        settings['background_size_mb']! * 1024 * 1024;
    PaintingBinding.instance.imageCache.maximumSize = 
        settings['background_count']!;
    
    final sizeAfter = PaintingBinding.instance.imageCache.currentSizeBytes;
    final countAfter = PaintingBinding.instance.imageCache.currentSize;
    
    debugPrint('ðŸ“‰ Background cache optimize: ${(sizeBefore / 1024 / 1024).toStringAsFixed(1)}MB -> ${(sizeAfter / 1024 / 1024).toStringAsFixed(1)}MB');
    debugPrint('ðŸ“‰ Image count: $countBefore -> $countAfter');
  }
  
  // ðŸš€ PERFORMANCE MOD: Foreground'a dÃ¶nerken cache boyutunu artÄ±r
  static void restoreForForeground() {
    if (kIsWeb) return;
    
    final deviceCategory = PerformanceUtils.deviceCategory;
    final settings = cacheSettings[deviceCategory] ?? cacheSettings['mid_range']!;
    
    // Foreground cache ayarlarÄ±na geri dÃ¶n
    PaintingBinding.instance.imageCache.maximumSizeBytes = 
        settings['max_size_mb']! * 1024 * 1024;
    PaintingBinding.instance.imageCache.maximumSize = 
        settings['max_count']!;
    
    debugPrint('ðŸ“ˆ Foreground cache restore: ${settings['max_size_mb']}MB, ${settings['max_count']} images (Kategori: $deviceCategory)');
  }
  
  // ðŸš€ PERFORMANCE MOD: Manuel cache temizleme (dÃ¼ÅŸÃ¼k performans durumlarÄ± iÃ§in)
  static void clearCache({bool aggressive = false}) {
    if (kIsWeb) return;
    
    final sizeBefore = PaintingBinding.instance.imageCache.currentSizeBytes;
    final countBefore = PaintingBinding.instance.imageCache.currentSize;
    
    if (aggressive) {
      // ðŸš€ PERFORMANCE MOD: Agresif temizlik - tÃ¼m cache'i sil
      PaintingBinding.instance.imageCache.clear();
      PaintingBinding.instance.imageCache.clearLiveImages();
      
      // DÃ¼ÅŸÃ¼k performanslÄ± cihazlar iÃ§in cache boyutunu minimize et
      if (PerformanceUtils.isLowEndDevice) {
        PaintingBinding.instance.imageCache.maximumSizeBytes = 50 * 1024 * 1024; // 50MB
        PaintingBinding.instance.imageCache.maximumSize = 500;
        debugPrint('ðŸ§¹ Agresif cache temizliÄŸi (dÃ¼ÅŸÃ¼k performans cihaz)');
      }
    } else {
      // Normal temizlik
      PaintingBinding.instance.imageCache.clear();
    }
    
    final sizeAfter = PaintingBinding.instance.imageCache.currentSizeBytes;
    final countAfter = PaintingBinding.instance.imageCache.currentSize;
    
    debugPrint('ðŸ§¹ Cache temizlendi: ${(sizeBefore / 1024 / 1024).toStringAsFixed(1)}MB -> ${(sizeAfter / 1024 / 1024).toStringAsFixed(1)}MB');
    debugPrint('ðŸ§¹ Image count: $countBefore -> $countAfter');
  }
  
  // ðŸš€ PERFORMANCE MOD: DÃ¼ÅŸÃ¼k memory durumlarÄ± iÃ§in acil cache temizleme
  static void onLowMemory() {
    if (kIsWeb) return;
    
    debugPrint('ðŸ†˜ ACÄ°L CACHE TEMÄ°ZLÄ°ÄžÄ°!');
    
    // TÃ¼m cache'i temizle
    PaintingBinding.instance.imageCache.clear();
    PaintingBinding.instance.imageCache.clearLiveImages();
    
    // Minimum cache boyutuna indir
    PaintingBinding.instance.imageCache.maximumSizeBytes = 25 * 1024 * 1024; // 25MB
    PaintingBinding.instance.imageCache.maximumSize = 250;
    
    debugPrint('ðŸ§¹ Acil cache temizliÄŸi tamamlandÄ±: 25MB, 250 images');
  }
  
  // ðŸš€ PERFORMANCE MOD: Cache durumunu raporla
  static void reportCacheStatus() {
    if (kIsWeb) return;
    
    final currentSize = PaintingBinding.instance.imageCache.currentSizeBytes;
    final maxSize = PaintingBinding.instance.imageCache.maximumSizeBytes;
    final currentCount = PaintingBinding.instance.imageCache.currentSize;
    final maxCount = PaintingBinding.instance.imageCache.maximumSize;
    
    final usagePercentage = (currentSize / maxSize * 100).toStringAsFixed(1);
    
    debugPrint('ðŸ“Š Cache Durumu:');
    debugPrint('   â€¢ Boyut: ${(currentSize / 1024 / 1024).toStringAsFixed(1)}MB / ${(maxSize / 1024 / 1024).toStringAsFixed(1)}MB ($usagePercentage%)');
    debugPrint('   â€¢ Count: $currentCount / $maxCount');
    debugPrint('   â€¢ Cihaz Kategorisi: ${PerformanceUtils.deviceCategory}');
  }
} 