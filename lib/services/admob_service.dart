import 'dart:io';
import 'dart:async';
import 'package:google_mobile_ads/google_mobile_ads.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'credits_service.dart';

class AdMobService {
  static final AdMobService _instance = AdMobService._internal();
  factory AdMobService() => _instance;
  AdMobService._internal() {
    _initializeCreditsListener();
  }

  final CreditsService _creditsService = CreditsService();

  InterstitialAd? _interstitialAd;
  InterstitialAd? _aiSearchInterstitialAd;
  AppOpenAd? _appOpenAd;
  bool _isLoadingInterstitialAd = false;
  bool _isShowingAd = false;
  DateTime? _lastInterstitialShowTime;
  DateTime? _lastAiSearchAdShowTime;
  AppLifecycleState? _previousState;
  bool _creditsServiceInitialized = false;
  bool _isInAppAction = false;
  
  static Future<void> initialize() async {
    await MobileAds.instance.initialize();
  }

  static Duration get _minTimeBetweenInterstitialAds => kDebugMode
      ? const Duration(seconds: 5)
      : const Duration(seconds: 60);

  bool get mounted => _interstitialAd != null || _aiSearchInterstitialAd != null;
  bool get isInterstitialAdAvailable => _interstitialAd != null;

  static String get bannerAdUnitId {
    return Platform.isAndroid
        ? 'ca-app-pub-3375249639458473/4451476746'
        : 'ca-app-pub-3375249639458473/4569259764'; // iOS ID'si i√ßin varsayƒ±lan
  }

  static String get interstitialAdUnitId {
    return Platform.isAndroid
        ? 'ca-app-pub-3375249639458473/4972153248'
        : 'ca-app-pub-3375249639458473/4972153248'; // iOS ID'si i√ßin varsayƒ±lan
  }

  static String get nativeAdUnitId {
    return Platform.isAndroid
        ? 'ca-app-pub-3375249639458473/8521867085'
        : 'ca-app-pub-3375249639458473/8521867085'; // iOS ID'si i√ßin varsayƒ±lan
  }

  static String get appOpenAdUnitId {
    if (kDebugMode) {
      return 'ca-app-pub-3940256099942544/9257395921';
    }
    return Platform.isAndroid
        ? 'ca-app-pub-3375249639458473/5938393525'
        : 'ca-app-pub-3375249639458473/5938393525'; // iOS i√ßin de aynƒ± ID'yi varsayalƒ±m
  }

  static String get aiSearchInterstitialAdUnitId {
    return Platform.isAndroid
        ? 'ca-app-pub-3375249639458473/9302952942'
        : 'ca-app-pub-3375249639458473/9302952942'; // iOS ID'si i√ßin varsayƒ±lan
  }

  void _initializeCreditsListener() {
    _creditsService.addListener(_handleCreditsChange);
    // ƒ∞lk durumu hemen kontrol et
    _handleCreditsChange();
    _creditsServiceInitialized = true;
  }

  void dispose() {
    _creditsService.removeListener(_handleCreditsChange);
    _interstitialAd?.dispose();
    _aiSearchInterstitialAd?.dispose();
    _appOpenAd?.dispose();
  }

  void _handleCreditsChange() {
    if (!_creditsService.isPremium && !_creditsService.isLifetimeAdsFree) {
      debugPrint('üîÑ [AdMob] Premium/Reklamsƒ±z deƒüil - Reklamlar y√ºkleniyor...');
      loadInterstitialAd();
      loadAiSearchInterstitialAd();
      loadAppOpenAd(); // App Open Ad'i de y√ºkle
    } else {
      debugPrint('‚ú® [AdMob] Premium/Reklamsƒ±z aktif - Reklamlar temizleniyor.');
      _interstitialAd?.dispose();
      _interstitialAd = null;
      _aiSearchInterstitialAd?.dispose();
      _aiSearchInterstitialAd = null;
      _appOpenAd?.dispose();
      _appOpenAd = null;
    }
  }

  void loadAppOpenAd() {
    if (_creditsService.isPremium || _creditsService.isLifetimeAdsFree) return;
    
    AppOpenAd.load(
      adUnitId: appOpenAdUnitId,
      request: const AdRequest(),
      adLoadCallback: AppOpenAdLoadCallback(
        onAdLoaded: (ad) {
          _appOpenAd = ad;
          debugPrint('‚úÖ [AdMob] App Open Ad y√ºklendi.');
        },
        onAdFailedToLoad: (error) {
          debugPrint('‚ùå [AdMob] App Open Ad y√ºklenemedi: $error');
        },
      ),
    );
  }

  void showAppOpenAdIfAvailable() {
    if (_appOpenAd == null || _isShowingAd) {
      debugPrint('‚ö†Ô∏è [AdMob] App Open Ad g√∂sterilemedi, hazƒ±r deƒüil veya ba≈üka bir reklam g√∂sterimde.');
      loadAppOpenAd();
      return;
    }

    if (_isInAppAction) {
      debugPrint('ü§´ [AdMob] Uygulama i√ßi i≈ülem aktif, App Open Ad g√∂sterilmiyor.');
      return;
    }

    _appOpenAd!.fullScreenContentCallback = FullScreenContentCallback(
      onAdShowedFullScreenContent: (ad) {
        _isShowingAd = true;
        debugPrint('üé¨ [AdMob] App Open Ad g√∂sterildi.');
      },
      onAdDismissedFullScreenContent: (ad) {
        _isShowingAd = false;
        ad.dispose();
        _appOpenAd = null;
        loadAppOpenAd();
        debugPrint('‚úÖ [AdMob] App Open Ad kapatƒ±ldƒ±.');
      },
      onAdFailedToShowFullScreenContent: (ad, error) {
        _isShowingAd = false;
        ad.dispose();
        _appOpenAd = null;
        loadAppOpenAd();
        debugPrint('‚ùå [AdMob] App Open Ad g√∂sterilemedi: $error');
      },
    );
    _appOpenAd!.show();
  }

  void loadInterstitialAd() {
    if (_isLoadingInterstitialAd || _interstitialAd != null) return;

    _isLoadingInterstitialAd = true;
    debugPrint('üöÄ [AdMob] Normal Ge√ßi≈ü reklamƒ± y√ºkleniyor...');
    InterstitialAd.load(
      adUnitId: interstitialAdUnitId,
      request: const AdRequest(),
      adLoadCallback: InterstitialAdLoadCallback(
        onAdLoaded: (InterstitialAd ad) {
          debugPrint('‚úÖ [AdMob] Normal Ge√ßi≈ü reklamƒ± y√ºklendi.');
          _interstitialAd = ad;
          _isLoadingInterstitialAd = false;
        },
        onAdFailedToLoad: (LoadAdError error) {
          debugPrint('‚ùå [AdMob] Normal Ge√ßi≈ü reklamƒ± y√ºklenemedi: ${error.message}');
          _isLoadingInterstitialAd = false;
        },
      ),
    );
  }

  void forceShowInterstitialAd() {
    debugPrint('üé¨ [AdMob] forceShowInterstitialAd metodu √ßaƒürƒ±ldƒ±.');
    if (_interstitialAd == null || _isShowingAd) {
      debugPrint('‚ö†Ô∏è [AdMob] Zorunlu reklam g√∂sterilemedi, hazƒ±r deƒüil (null: ${_interstitialAd == null}) veya ba≈üka bir reklam g√∂sterimde (showing: $_isShowingAd).');
      loadInterstitialAd();
      return;
    }
    
    _lastInterstitialShowTime = DateTime.now(); // Sadece normal reklamƒ±n zamanƒ±nƒ± kaydet
    _isShowingAd = true;
    _interstitialAd!.fullScreenContentCallback = FullScreenContentCallback(
      onAdDismissedFullScreenContent: (ad) {
        ad.dispose();
        _interstitialAd = null;
        _isShowingAd = false;
        loadInterstitialAd();
      },
      onAdFailedToShowFullScreenContent: (ad, error) {
        ad.dispose();
        _interstitialAd = null;
        _isShowingAd = false;
        loadInterstitialAd();
      }
    );
    _interstitialAd!.show();
  }

  void loadAiSearchInterstitialAd() {
    if (_aiSearchInterstitialAd != null) return;
    debugPrint('üöÄ [AdMob] AI Arama Ge√ßi≈ü reklamƒ± y√ºkleniyor...');
    InterstitialAd.load(
      adUnitId: aiSearchInterstitialAdUnitId,
      request: const AdRequest(),
      adLoadCallback: InterstitialAdLoadCallback(
        onAdLoaded: (InterstitialAd ad) {
          debugPrint('‚úÖ [AdMob] AI Arama Ge√ßi≈ü reklamƒ± y√ºklendi.');
          _aiSearchInterstitialAd = ad;
        },
        onAdFailedToLoad: (LoadAdError error) {
          debugPrint('‚ùå [AdMob] AI Arama Ge√ßi≈ü reklamƒ± y√ºklenemedi: ${error.message}');
          _aiSearchInterstitialAd = null;
        },
      ),
    );
  }

  Future<void> showAiSearchInterstitialAd({required VoidCallback onAdDismissed}) async {
    if (_aiSearchInterstitialAd == null) {
      debugPrint('‚ö†Ô∏è [AdMob] AI Arama Ge√ßi≈ü reklamƒ± hen√ºz hazƒ±r deƒüil.');
      onAdDismissed();
      loadAiSearchInterstitialAd();
      return;
    }

    if (_isShowingAd) {
      debugPrint('‚ö†Ô∏è [AdMob] Ba≈üka bir reklam g√∂sterimde, AI reklamƒ± g√∂sterilmiyor.');
      onAdDismissed();
      return;
    }

    _lastAiSearchAdShowTime = DateTime.now(); // Sadece AI reklamƒ±nƒ±n zamanƒ±nƒ± kaydet
    _isShowingAd = true;
    _aiSearchInterstitialAd!.fullScreenContentCallback = FullScreenContentCallback(
      onAdDismissedFullScreenContent: (InterstitialAd ad) {
        debugPrint('‚úÖ [AdMob] AI Arama Ge√ßi≈ü reklamƒ± kapatƒ±ldƒ±.');
        ad.dispose();
        _aiSearchInterstitialAd = null;
        _isShowingAd = false;
        loadAiSearchInterstitialAd();
        onAdDismissed();
      },
      onAdFailedToShowFullScreenContent: (InterstitialAd ad, AdError error) {
        debugPrint('‚ùå [AdMob] AI Arama Ge√ßi≈ü reklamƒ± g√∂sterilemedi: ${error.message}');
        ad.dispose();
        _aiSearchInterstitialAd = null;
        _isShowingAd = false;
        loadAiSearchInterstitialAd();
        onAdDismissed();
      },
    );

    debugPrint('üé¨ [AdMob] AI Arama Ge√ßi≈ü reklamƒ± g√∂steriliyor...');
    _aiSearchInterstitialAd!.show();
  }

  void onAppStateChanged(AppLifecycleState state) {
    debugPrint('üì± [Lifecycle] Uygulama durumu deƒüi≈üti: $state. √ñnceki durum: $_previousState');

    // Uygulama daha √∂nce arka plandayken (paused veya inactive) ≈üimdi √∂ne geldiyse (resumed)
    if (state == AppLifecycleState.resumed && (_previousState == AppLifecycleState.paused || _previousState == AppLifecycleState.inactive)) {
      debugPrint('‚úÖ [Lifecycle] Uygulama arka plandan geldi.');

      // 1. Adƒ±m: Ba≈üka bir reklam g√∂steriliyor mu?
      if (_isShowingAd) {
        debugPrint('ü§´ [AdMob] Reklam atlandƒ±: Ba≈üka bir reklam zaten g√∂sterimde.');
        _previousState = state;
        return;
      }

      // 2. Adƒ±m: Kullanƒ±cƒ± premium mu?
      if (!_creditsService.isPremium && !_creditsService.isLifetimeAdsFree) {
        debugPrint('üí∞ [AdMob] Kullanƒ±cƒ± premium deƒüil. Zamanlama kontrol ediliyor...');
        
        // 3. Adƒ±m: Zamanlama uygun mu?
        if (_lastInterstitialShowTime == null || DateTime.now().difference(_lastInterstitialShowTime!) > _minTimeBetweenInterstitialAds) {
          debugPrint('‚è∞ [AdMob] Zamanlama ko≈üulu uygun. Reklam g√∂sterme deneniyor...');
          forceShowInterstitialAd();
        } else {
          final timeSinceLastAd = DateTime.now().difference(_lastInterstitialShowTime!);
          debugPrint('‚è≥ [AdMob] Reklam atlandƒ±: Son reklamdan bu yana yeterli s√ºre ge√ßmedi. Ge√ßen s√ºre: ${timeSinceLastAd.inSeconds}s. Gerekli s√ºre: ${_minTimeBetweenInterstitialAds.inSeconds}s.');
        }
      } else {
        debugPrint('‚ú® [AdMob] Reklam atlandƒ±: Kullanƒ±cƒ± premium veya √∂m√ºr boyu reklamsƒ±z kullanƒ±m hakkƒ± var.');
      }
    }
    _previousState = state;
  }

  void setInAppActionFlag(String actionType) {
    debugPrint('üîí [AdMob] In-app action flag SET: $actionType');
    _isInAppAction = true;
  }

  void clearInAppActionFlag() {
    debugPrint('üîì [AdMob] In-app action flag CLEARED');
    _isInAppAction = false;
  }

  void debugAdStatus() {
    debugPrint('--- AdMob Debug Status ---');
    debugPrint('Premium: ${_creditsService.isPremium}');
    debugPrint('Lifetime Ads Free: ${_creditsService.isLifetimeAdsFree}');
    debugPrint('Interstitial Ad Loaded: ${isInterstitialAdAvailable}');
    debugPrint('AI Search Ad Loaded: ${_aiSearchInterstitialAd != null}');
    debugPrint('Is In-App Action: $_isInAppAction');
    debugPrint('Last Interstitial Show Time: $_lastInterstitialShowTime');
    debugPrint('Last AI Search Ad Show Time: $_lastAiSearchAdShowTime');
    debugPrint('--------------------------');
  }
}